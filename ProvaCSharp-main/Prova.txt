Program.cs:

using Microsoft.Data.Sqlite;
using AtividadeAvaliativa.Database;
using AtividadeAvaliativa.Repositories;
using AtividadeAvaliativa.Models;

var databaseConfig = new DatabaseConfig();
var databaseSetup = new DatabaseSetup(databaseConfig);

var clientesRepository = new ClientesRepository(databaseConfig);
var pedidosRepository = new PedidosRepository(databaseConfig);
var itenspedidosRepository = new ItensPedidosRepository(databaseConfig);
var vendedoresRepository = new VendedoresRepository(databaseConfig);
var produtosRepository = new ProdutosRepository(databaseConfig);

var modelName = args[0];
var modelAction = args[1];


if (modelName == "Cliente")
{
    if (modelAction == "Listar")
    {
        Console.WriteLine("Listar Cliente");
        Console.WriteLine("Código Cliente   Nome Cliente         Endereço                   Cidade      CEP        UF   IE");
        foreach (var cliente in clientesRepository.Listar())
        {
            Console.WriteLine($"{cliente.CodCliente,-16} {cliente.Nome,-20} {cliente.Endereco,-26} {cliente.Cidade,-11} {cliente.Cep,-10} {cliente.Uf,-4} {cliente.Ie}");
        }
    }

    if (modelAction == "Inserir")
    {
        Console.WriteLine("Inserir Cliente");
        Console.Write("Digite o código do cliente    : ");
        int codcliente = Convert.ToInt32(Console.ReadLine());
        Console.Write("Digite o Nome do cliente      : ");
        string? nome = Console.ReadLine();
        Console.Write("Digite o Endereço do cliente  : ");
        string? endereco = Console.ReadLine();
        Console.Write("Digite o Cidade do cliente    : ");
        string? cidade = Console.ReadLine();
        Console.Write("Digite o CEP do cliente       : ");
        string? cep = Console.ReadLine();
        Console.Write("Digite o UF do cliente        : ");
        string? uf = Console.ReadLine();
        Console.Write("Digite o Inscrição Estatual   : ");
        string? ie = Console.ReadLine();

        var cliente = new Clientes(codcliente, nome, endereco, cidade, cep, uf, ie);
        clientesRepository.Inserir(cliente);
    }


    if (modelAction == "Apresentar")
    {
        Console.WriteLine("Apresentar Cliente");
        Console.Write("Digite o código do cliente : ");
        var clienteid = Convert.ToInt32(Console.ReadLine());

        if (clientesRepository.Apresentar(clienteid))
        {
            var cliente = clientesRepository.GetById(clienteid);
            Console.WriteLine($"{cliente.CodCliente}, {cliente.Nome}, {cliente.Endereco}, {cliente.Cidade}, {cliente.Cep}, {cliente.Uf}, {cliente.Ie}");
        }
        else
        {
            Console.WriteLine($"O cliente com o código {clienteid} não existe.");
        }
    }
}



if (modelName == "Pedido")
{
    if (modelAction == "Listar")
    {

        Console.WriteLine("Listar Pedido");
        Console.WriteLine("Código Pedido   Prazo Entrega         Data Pedido           Código Cliente   Código Vendedor");
        foreach (var pedido in pedidosRepository.Listar())
        {
            Console.WriteLine($"{pedido.CodPedido, -15} {pedido.PrazoEntrega, -21} {pedido.DataPedido,-21} {pedido.PedidoCodCliente,-16} {pedido.PedidoCodVendedor}");
        }
    }

    if (modelAction == "Inserir")
    {
        Console.WriteLine("Inserir Pedido");
        Console.Write("Digite o código do pedido             : ");
        int codPedido = Convert.ToInt32(Console.ReadLine());
        Console.Write("Digite o prazo de entrega do pedido   : ");
        DateTime prazoEntrega = Convert.ToDateTime(Console.ReadLine());       
        Console.Write("Digite o código do cliente do pedido  : ");
        int pedidoCodCliente = Convert.ToInt32(Console.ReadLine());
        Console.Write("Digite o código do vendedor do pedido : ");
        int pedidoCodVendedor = Convert.ToInt32(Console.ReadLine());
        var pedido = new Pedidos(codPedido, prazoEntrega, DateTime.Now, pedidoCodCliente, pedidoCodVendedor);
        pedidosRepository.Inserir(pedido);
    }

    if (modelAction == "Apresentar")
    {
        Console.WriteLine("Apresentar Pedido");
        Console.Write("Digite o Código do Pedido : ");
        var codPedido = Convert.ToInt32(Console.ReadLine());

        if (pedidosRepository.Apresentar(codPedido))
        {
            var pedido = pedidosRepository.GetById(codPedido);
            Console.WriteLine($"{pedido.CodPedido}, {pedido.PrazoEntrega}, {pedido.DataPedido}, {pedido.PedidoCodCliente}, {pedido.PedidoCodVendedor}");
        }
        else
        {
            Console.WriteLine($"O cliente com o código {codPedido} não existe.");
        }
    }
}

if (modelName == "Produto")
{
    if (modelAction == "Listar")
    {

        Console.WriteLine("Listar Produto");
        Console.WriteLine("Código Produto   Descrição   Valor Unitário");
        foreach (var produto in produtosRepository.Listar())
        {
            Console.WriteLine($"{produto.CodProduto,-16} {produto.Descricao,-11} {produto.ValorUnitario}");
        }
    }

    if (modelAction == "Inserir")
    {
        Console.WriteLine("Inserir Produto");
        Console.Write("Digite o código do produto         : ");
        var codProduto = Convert.ToInt32(Console.ReadLine());
        Console.Write("Digite a descrição do produto      : ");
        string? descricao = Console.ReadLine();
        Console.Write("Digite o valor unitário do produto : ");
        var valorUnitario = Convert.ToDecimal(Console.ReadLine());
        var produto = new Produtos(codProduto, descricao, valorUnitario);
        produtosRepository.Inserir(produto);
    }

    if (modelAction == "Apresentar")
    {
        Console.WriteLine("Apresentar Produto");
        Console.Write("Digite o código do produto : ");
        var codProduto = Convert.ToInt32(Console.ReadLine());

        if (produtosRepository.Apresentar(codProduto))
        {
            var produto = produtosRepository.GetById(codProduto);

            Console.WriteLine($"{produto.CodProduto}, {produto.Descricao}, {produto.ValorUnitario}");
        }
        else
        {
            Console.WriteLine($"O produto com código {codProduto} não existe.");
        }
    }
}

if (modelName == "ItensPedido")
{
    if (modelAction == "Listar")
    {

        Console.WriteLine("Listar Itens do Pedido");
        Console.WriteLine("Código Item Pedido   Quantidade   Código Pedido   Codigo Produto");
        foreach (var ip in itenspedidosRepository.Listar())
        {
            Console.WriteLine($"{ip.CodItemPedido,-20} {ip.Quantidade,-12} {ip.ItemPedidoCodPedido,-15} {ip.ItemPedidoCodProduto}");
        }
    }

    if (modelAction == "Inserir")
    {
        Console.WriteLine("Inserir Itens do Pedido");
        Console.Write("Digite o código do item do pedido            : ");
        int codItemPedido = Convert.ToInt32(Console.ReadLine());
        Console.Write("Digite o código do pedido do item do pedido  : ");
        int itempedidocodpedido = Convert.ToInt32(Console.ReadLine());
        Console.Write("Digite o código do produto do item do pedido : ");
        int itempedidocodproduto = Convert.ToInt32(Console.ReadLine());
        Console.Write("Digite a quantidade do item do pedido        : ");
        int quantidade = Convert.ToInt32(Console.ReadLine());

        var itemPedido = new ItensPedidos(codItemPedido, itempedidocodpedido, itempedidocodproduto, quantidade);
        itenspedidosRepository.Inserir(itemPedido);
    }

    if (modelAction == "Apresentar")
    {
        Console.WriteLine("Apresentar Pedido");
        Console.Write("Digite o código do pedido : ");
        var codItemPedido = Convert.ToInt32(Console.ReadLine());

        if (itenspedidosRepository.Apresentar(codItemPedido))
        {
            var itensPedido = itenspedidosRepository.GetById(codItemPedido);
            Console.WriteLine($"{itensPedido.CodItemPedido}, {itensPedido.Quantidade}, {itensPedido.ItemPedidoCodPedido}, {itensPedido.ItemPedidoCodProduto}");
        }
        else
        {
            Console.WriteLine($"O pedido com o código {codItemPedido} não existe.");
        }
    }
}

if (modelName == "Vendedor")
{
    if (modelAction == "Listar")
    {

        Console.WriteLine("Listar Vendedor");
        Console.WriteLine("Código Vendedor   Nome Vendedor      Salário Fixo   Faixa Comissão");
        foreach (var vendedor in vendedoresRepository.Listar())
        {
            Console.WriteLine($"{vendedor.CodVendedor,-17} {vendedor.Nome,-18} {vendedor.SalarioFixo,-14} {vendedor.FaixaComissao}");
        }
    }

    if (modelAction == "Inserir")
    {
        Console.WriteLine("Inserir Vendedor");
        Console.Write("Digite o código do vendedor            : ");
        int codVendedor = Convert.ToInt32(Console.ReadLine());
        Console.Write("Digite o nome do vendedor              : ");
        string? nome = Console.ReadLine();
        Console.Write("Digite o salário fixo do vendedor      : ");
        decimal salario = decimal.Parse(Console.ReadLine());
        Console.Write("Digite o faixa de comissão do vendedor : ");
        string? faixaComissao = Console.ReadLine();

        var vendedor = new Vendedores(codVendedor, nome, salario, faixaComissao);
        vendedoresRepository.Inserir(vendedor);
    }

    if (modelAction == "Apresentar")
    {
        Console.WriteLine("Apresentar Vendedor");
        Console.Write("Digite o código do vendedor : ");
        int codVendedor = Convert.ToInt32(Console.ReadLine());

        if (vendedoresRepository.Apresentar(codVendedor))
        {
            var vendedor = vendedoresRepository.GetById(codVendedor);
            Console.WriteLine($"{vendedor.CodVendedor}, {vendedor.Nome}, {vendedor.SalarioFixo}, {vendedor.FaixaComissao}");
        }
        else
        {
            Console.WriteLine($"O vendedor com o código {codVendedor} não existe.");
        }
    }
}


DatabaseConfig:

namespace AtividadeAvaliativa.Database;

class DatabaseConfig
{
    public string ConnectionString { get => "Data Source=database.db"; }
}


DatabaseSetup:

using AtividadeAvaliativa.Database;
using AtividadeAvaliativa.Models;
using Microsoft.Data.Sqlite;
namespace AtividadeAvaliativa.Repositories;

class DatabaseSetup {
    private readonly DatabaseConfig _databaseConfig;

    public DatabaseSetup(DatabaseConfig databaseConfig)
    {
        _databaseConfig = databaseConfig;
        CreateClientesTable();
        CreatePedidosTable();
        CreateItensPedidosTable();
        CreateVendedoresTable();
        CreateProdutosTable();
    }

    private void CreateClientesTable() {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = @"
            CREATE TABLE IF NOT EXISTS Clientes(
                codcliente int not null primary key,
                nome varchar(45) not null,
                endereco varchar(45) not null,
                cidade varchar(45) not null,
                cep varchar(11) not null,
                uf varchar(02) not null,
                ie varchar(12) not null
            );
        ";

        command.ExecuteNonQuery();
        connection.Close();
    }

    private void CreatePedidosTable() {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = @"
            CREATE TABLE IF NOT EXISTS Pedidos(
                codpedido int not null primary key,
                prazoentrega datetime not null,
                datapedido datetime not null,
                pedidocodcliente int not null,
                pedidocodvendedor int not null
            );
        ";

        command.ExecuteNonQuery();
        connection.Close();
    }

    private void CreateItensPedidosTable() {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = @"
            CREATE TABLE IF NOT EXISTS ItensPedidos(
                coditempedido int not null primary key,
                itempedidocodpedido int not null,
                itempedidocodproduto int not null,
                quantidade int not null
            );
        ";

        command.ExecuteNonQuery();
        connection.Close();
        
    }

    private void CreateVendedoresTable() {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = @"
            CREATE TABLE IF NOT EXISTS Vendedores(
                codvendedor int not null primary key,
                nome varchar(45) not null,
                salariofixo decimal not null,
                faixacomissao varchar(5) not null
            );
        ";

        command.ExecuteNonQuery();
        connection.Close();
        
    }

    private void CreateProdutosTable() {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = @"
            CREATE TABLE IF NOT EXISTS Produtos(
                codproduto int not null primary key,
                descricao varchar(45) not null,
                valorunitario decimal not null
            );
        ";

        command.ExecuteNonQuery();
        connection.Close();
        
    }
    
}

Clientes:

namespace AtividadeAvaliativa.Models;

class Clientes {
    public int CodCliente { get; set; }
    public string Nome { get; set; }
    public string Endereco { get; set; }
    public string Cidade { get; set; }
    public string Cep { get; set; }
    public string Uf { get; set; }
    public string Ie { get; set; }

    public Clientes(int codcliente, string nome, string endereco, string cidade, string cep, string uf, string ie) {
        CodCliente = codcliente;
        Nome = nome;
        Endereco = endereco;
        Cidade = cidade;
        Cep = cep;
        Uf = uf;
        Ie = ie;
    }
}

ClientesRepository :

using AtividadeAvaliativa.Database;
using AtividadeAvaliativa.Models;
using Microsoft.Data.Sqlite;
namespace AtividadeAvaliativa.Repositories;

class ClientesRepository {
    private readonly DatabaseConfig _databaseConfig;
    public ClientesRepository(DatabaseConfig databaseConfig)
    {
        _databaseConfig = databaseConfig;
    }

    public List<Clientes> Listar()
    {
        var clientes = new List<Clientes>();

        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "SELECT * FROM Clientes";

        var reader = command.ExecuteReader();

        while(reader.Read())
        {
            var codcliente = reader.GetInt32(0);
            var nome = reader.GetString(1);
            var endereco = reader.GetString(2);
            var cidade = reader.GetString(3);
            var cep = reader.GetString(4);
            var uf = reader.GetString(5);
            var ie = reader.GetString(6);
            var cliente =  ReaderToCliente(reader);
            clientes.Add(cliente);
        }

        connection.Close();
        
        return clientes;
    }

    public Clientes Inserir(Clientes clientes)
    {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "INSERT INTO Clientes VALUES($codcliente, $nome, $endereco, $cidade, $cep, $uf, $ie)";
        command.Parameters.AddWithValue("$codcliente", clientes.CodCliente);
        command.Parameters.AddWithValue("$nome", clientes.Nome);
        command.Parameters.AddWithValue("$endereco", clientes.Endereco);
        command.Parameters.AddWithValue("$cidade", clientes.Cidade);
        command.Parameters.AddWithValue("$cep", clientes.Cep);
        command.Parameters.AddWithValue("$uf", clientes.Uf);
        command.Parameters.AddWithValue("$ie", clientes.Ie);

        command.ExecuteNonQuery();
        connection.Close();

        return clientes;
    }
    public bool Apresentar(int codcliente)
    {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "SELECT count(codcliente) FROM Clientes WHERE (codcliente = $id)";
        command.Parameters.AddWithValue("$id", codcliente);

        var reader = command.ExecuteReader();
        reader.Read();
        var result = reader.GetBoolean(0);

        return result;
    }

    public Clientes GetById(int codcliente)
    {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "SELECT * FROM Clientes WHERE (codcliente = $codcliente)";
        command.Parameters.AddWithValue("$codcliente", codcliente);

        var reader = command.ExecuteReader();
        reader.Read();

        var cliente = ReaderToCliente(reader);

        connection.Close(); 

        return cliente;
    }
    private Clientes ReaderToCliente(SqliteDataReader reader)
    {
        var clientes = new Clientes(reader.GetInt32(0), reader.GetString(1), reader.GetString(2), reader.GetString(3), reader.GetString(4), reader.GetString(5), reader.GetString(6));

        return clientes;
    }
}

Pedidos :

namespace AtividadeAvaliativa.Models;

class Pedidos {
    public int CodPedido { get; set; }
    public DateTime PrazoEntrega { get; set; }
    public DateTime DataPedido = DateTime.Now;
    public int PedidoCodCliente { get; set; }
    public int PedidoCodVendedor { get; set; }

    public Pedidos(int codpedido, DateTime prazoentrega, DateTime datapedido, int pedidocodcliente, int pedidocodvendedor) {
        CodPedido = codpedido;
        PrazoEntrega = prazoentrega;
        DataPedido = datapedido;
        PedidoCodCliente = pedidocodcliente;
        PedidoCodVendedor = pedidocodvendedor;
    }
}

PedidosRepository : 

using AtividadeAvaliativa.Database;
using AtividadeAvaliativa.Models;
using Microsoft.Data.Sqlite;
namespace AtividadeAvaliativa.Repositories;

class PedidosRepository {
    private readonly DatabaseConfig _databaseConfig;
    public PedidosRepository(DatabaseConfig databaseConfig)
    {
        _databaseConfig = databaseConfig;
    }

    public List<Pedidos> Listar()
    {
        var Pedidos = new List<Pedidos>();

        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "SELECT * FROM Pedidos";

        var reader = command.ExecuteReader();

        while(reader.Read())
        {
            var CodPedido = reader.GetInt32(0);
            var PrazoEntrega = reader.GetDateTime(1);
            var DataPedido = reader.GetDateTime(2);
            var PedidoCodCliente = reader.GetInt32(3); 
            var PedidoCodVendedor = reader.GetInt32(4); 
            var Pedido =  ReaderToPedidos(reader);
            Pedidos.Add(Pedido);
        }

        connection.Close();
        
        return Pedidos;
    }

    public Pedidos Inserir(Pedidos pedido)
    {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "INSERT INTO Pedidos VALUES($CodPedido, $PrazoEntrega, $DataPedido, $PedidoCodCliente, $PedidoCodVendedor)";
        command.Parameters.AddWithValue("$CodPedido", pedido.CodPedido);
        command.Parameters.AddWithValue("$PrazoEntrega", pedido.PrazoEntrega);
        command.Parameters.AddWithValue("$DataPedido", pedido.DataPedido);
        command.Parameters.AddWithValue("$PedidoCodCliente", pedido.PedidoCodCliente);
        command.Parameters.AddWithValue("$PedidoCodVendedor", pedido.PedidoCodVendedor);

        command.ExecuteNonQuery();
        connection.Close();

        return pedido;
    }     


     public bool Apresentar(int CodPedido)
    {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "SELECT count(CodPedido) FROM Pedidos WHERE (CodPedido = $id)";
        command.Parameters.AddWithValue("$id", CodPedido);

        var reader = command.ExecuteReader();
        reader.Read();
        var result = reader.GetBoolean(0);

        return result;
    }


    public Pedidos GetById(int CodPedido)
    {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "SELECT * FROM Pedidos WHERE (CodPedido = $CodPedido)";
        command.Parameters.AddWithValue("$CodPedido", CodPedido);

        var reader = command.ExecuteReader();
        reader.Read();

        var pedido = ReaderToPedidos(reader);

        connection.Close(); 

        return pedido;
    }

    private Pedidos ReaderToPedidos(SqliteDataReader reader)
    {
        var Pedido = new Pedidos(reader.GetInt32(0), reader.GetDateTime(1), reader.GetDateTime(2), reader.GetInt32(3), reader.GetInt32(4));

        return Pedido;
    }

    Vendedores :


class Vendedores {
    public int CodVendedor { get; set; }
    public string Nome { get; set; }
    public decimal SalarioFixo { get; set; }
    public string FaixaComissao { get; set; }

    public Vendedores(int codvendedor, string nome, decimal salariofixo, string faixacomissao) {
        CodVendedor = codvendedor;
        Nome = nome;
        SalarioFixo = salariofixo;
        FaixaComissao = faixacomissao;
    }
}

VendedoresRepository : 

using AtividadeAvaliativa.Database;
using AtividadeAvaliativa.Models;
using Microsoft.Data.Sqlite;
namespace AtividadeAvaliativa.Repositories;

class VendedoresRepository {
    private readonly DatabaseConfig _databaseConfig;
    public VendedoresRepository(DatabaseConfig databaseConfig)
    {
        _databaseConfig = databaseConfig;
    }

     public List<Vendedores> Listar()
    {
        var Vendedores = new List<Vendedores>();

        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "SELECT * FROM Vendedores";

        var reader = command.ExecuteReader();

        while(reader.Read())
        {
            var CodVendedor = reader.GetInt32(0);
            var Nome = reader.GetString(1);
            var SalarioFixo = reader.GetDecimal(2);
            var FaixaComissao = reader.GetString(3);
           
           
            var Vendedor = ReaderToVendedores(reader);
            Vendedores.Add(Vendedor);
        }

        connection.Close();
        
        return Vendedores;
    }

    public bool Apresentar(int codvendedor)
    {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "SELECT count(codvendedor) FROM Vendedores WHERE (codvendedor = $id)";
        command.Parameters.AddWithValue("$id", codvendedor);

        var reader = command.ExecuteReader();
        reader.Read();
        var result = reader.GetBoolean(0);

        return result;
    }

    public Vendedores GetById(int codvendedor)
    {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "SELECT * FROM Vendedores WHERE (codvendedor = $codvendedor)";
        command.Parameters.AddWithValue("$codvendedor", codvendedor);

        var reader = command.ExecuteReader();
        reader.Read();

        var vendedor = ReaderToVendedores(reader);

        connection.Close(); 

        return vendedor;
    }
    public Vendedores Inserir(Vendedores vendedor)
    {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "INSERT INTO Vendedores VALUES($codvendedor, $nome, $salariofixo, $faixacomissao) ";
        command.Parameters.AddWithValue("$codvendedor", vendedor.CodVendedor);
        command.Parameters.AddWithValue("$nome", vendedor.Nome);
        command.Parameters.AddWithValue("$salariofixo", vendedor.SalarioFixo);
        command.Parameters.AddWithValue("$faixacomissao", vendedor.FaixaComissao);

        command.ExecuteNonQuery();
        connection.Close();

        return vendedor;
    }     
    private Vendedores ReaderToVendedores(SqliteDataReader reader)
    {
        var vendedor = new Vendedores(reader.GetInt32(0), reader.GetString(1), reader.GetDecimal(2), reader.GetString(3));

        return vendedor;
    }
}

ItensPedido : 

namespace AtividadeAvaliativa.Models;

class ItensPedidos {
    private int v1;
    private DateTime dateTime1;
    private DateTime dateTime2;
    private int v2;

    public int CodItemPedido { get; set; }
    public int ItemPedidoCodPedido { get; set; }
    public int ItemPedidoCodProduto { get; set; }
    public int Quantidade { get; set; }

    public ItensPedidos(int coditempedido, int itempedidocodpedido, int itempedidocodproduto, int quantidade) {
        CodItemPedido = coditempedido;
        ItemPedidoCodPedido = itempedidocodpedido;
        ItemPedidoCodProduto = itempedidocodproduto;
        Quantidade = quantidade;
    }

    public ItensPedidos(int v1, DateTime dateTime1, DateTime dateTime2, int v2)
    {
        this.v1 = v1;
        this.dateTime1 = dateTime1;
        this.dateTime2 = dateTime2;
        this.v2 = v2;
    }
}

ItensPedidosRepository : 

using AtividadeAvaliativa.Database;
using AtividadeAvaliativa.Models;
using Microsoft.Data.Sqlite;
namespace AtividadeAvaliativa.Repositories;

class ItensPedidosRepository 
{
    private readonly DatabaseConfig _databaseConfig;
    public ItensPedidosRepository(DatabaseConfig databaseConfig)
    {
        _databaseConfig = databaseConfig;
    }


    public List<ItensPedidos> Listar()
    {
        var itensPedidos = new List<ItensPedidos>();

        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "SELECT * FROM ItensPedidos";

        var reader = command.ExecuteReader();

        while(reader.Read())
        {
            var coditempedido = reader.GetInt32(0);
            var itempedidocodpedido = reader.GetString(1);
            var itempedidocodproduto = reader.GetString(2);
            var quantidade = reader.GetString(3);            
            var itemPedido =  ReaderToItensPedidos(reader);
            itensPedidos.Add(itemPedido);
        }

        connection.Close();
        
        return itensPedidos;

    }


        public ItensPedidos Inserir(ItensPedidos itensPedidos)
    {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "INSERT INTO ItensPedidos VALUES($coditempedido, $itempedidocodpedido, $itempedidocodproduto, $quantidade)";
        command.Parameters.AddWithValue("$coditempedido", itensPedidos.CodItemPedido);
        command.Parameters.AddWithValue("$itempedidocodpedido", itensPedidos.ItemPedidoCodPedido);
        command.Parameters.AddWithValue("$itempedidocodproduto", itensPedidos.ItemPedidoCodProduto);
        command.Parameters.AddWithValue("$quantidade", itensPedidos.Quantidade);
       

        command.ExecuteNonQuery();
        connection.Close();

        return itensPedidos;
    }

    public bool Apresentar(int coditempedido)
    {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "SELECT count(coditempedido) FROM ItensPedidos WHERE (coditempedido = $id)";
        command.Parameters.AddWithValue("$id", coditempedido);

        var reader = command.ExecuteReader();   
        reader.Read();
        var result = reader.GetBoolean(0);

        return result;
    }



     public ItensPedidos GetById(int coditempedido)
    {
        var connection = new SqliteConnection(_databaseConfig.ConnectionString);
        connection.Open();

        var command = connection.CreateCommand();
        command.CommandText = "SELECT * FROM ItensPedidos WHERE (coditempedido = $coditempedido)";
        command.Parameters.AddWithValue("$coditempedido", coditempedido);

        var reader = command.ExecuteReader();
        reader.Read();

        var itemPedido = ReaderToItensPedidos(reader);

        connection.Close(); 

        return itemPedido;
    }




    private ItensPedidos ReaderToItensPedidos(SqliteDataReader reader)
    {
        var ItemPedido = new ItensPedidos(reader.GetInt32(0), reader.GetInt32(1), reader.GetInt32(2), reader.GetInt32(3));

        return ItemPedido;
    }
    }

    













}

